## This is a basic workflow to help you get started with Actions
#
#name: CI
#
## Controls when the workflow will run
#on:
#  # Triggers the workflow on push or pull request events but only for the main branch
#  push:
#    branches: [dev]
#
#  # Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:
#
## A workflow run is made up of one or more jobs that can run sequentially or in parallel
#jobs:
#  # This workflow contains a single job called "build"
#  build:
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
#
#    # Steps represent a sequence of tasks that will be executed as part of the job
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v2
#
#        # Set up Python 3.6 environment
#      - name: Set up Python 3.7
#        uses: actions/setup-python@v1
#        with:
#          python-version: "3.7"
#
#      # Install dependencies
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r ./requirements.txt
#      # Run our unit tests using the test application
#      - name: Run unit tests
#        run: |
#          python tests/test_script.py
#
#  deploy:
#    # Only run this job if "build" has ended successfully
#    needs:
#      - build
#
#    runs-on: ubuntu-latest
#
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE
#      - uses: actions/checkout@v2
#
#      # Set up Python 3.6 environment
#      - name: Set up Python 3.7
#        uses: actions/setup-python@v1
#        with:
#          python-version: "3.7"
#
#      # Elastic Beanstalk CLI version
#      - name: Get EB CLI version
#        run: |
#          python -m pip install --upgrade pip
#          pip install awsebcli --upgrade
#          eb --version
#
#
#      # Configure AWS Credentials
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: eu-central-1
#
#      # Create the Elastic Beanstalk application
#      - name: Create EBS application
#        run: |
#          eb init -p python-3.7 app.py --region ap-southeast-1
#
#      # Deploy to (or Create) the Elastic Beanstalk environment
#      - name: Create test environment & deploy
#        run: |
#          (eb use test-environment && eb status test-environment && eb deploy) || eb create test-environment

##name: CI
##
##on:
##  push:
##    branches: [dev]
##
##jobs:
##  build:
##    runs-on: ubuntu-latest
##
##    steps:
##      # Checks-out your repository under $GITHUB_WORKSPACE
##      - uses: actions/checkout@v2
##
##      # Set up Python 3.7 environment
##      - name: Set up Python 3.7
##        uses: actions/setup-python@v1
##        with:
##          python-version: "3.7"
##
##      - name: Get pip cache dir
##        id: pip-cache
##        run: |
##          echo "::set-output name=dir::$(pip cache dir)"
##
##      - name: Cache pip
##        uses: actions/cache@v1
##        with:
##          path: ${{ steps.pip-cache.outputs.dir }}
##          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
##          restore-keys: |
##            ${{ runner.os }}-pip-
##
##      # Install dependencies
##      - name: Install dependencies
##        run: |
##          python -m pip install --upgrade pip
##          pip install -r ./requirements.txt
##      # Run our unit tests
##      - name: Run unit tests
##        run: |
##          python tests/test_script.py
##  deploy-to-test:
##    # Only run this job if "build" has ended successfully
##    needs:
##      - build
##
##    runs-on: ubuntu-latest
#
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE
#      - uses: actions/checkout@v2
#
#      # Set up Python 3.7 environment
#      - name: Set up Python 3.7
#        uses: actions/setup-python@v1
#        with:
#          python-version: "3.7"
#
#      # Set up cache for pip
#      - name: Get pip cache dir
#        id: pip-cache
#        run: |
#          echo "::set-output name=dir::$(pip cache dir)"
#      - name: Cache pip
#        uses: actions/cache@v1
#        with:
#          path: ${{ steps.pip-cache.outputs.dir }}
#          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
#          restore-keys: |
#            ${{ runner.os }}-pip-
#      # Elastic Beanstalk CLI version
#      - name: Get EB CLI version
#        run: |
#          python -m pip install --upgrade pip
#          pip install awsebcli --upgrade
#          eb --version
#      # Configure AWS Credentials
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-southeast-1
#
#      # Create the Elastic Beanstalk application
#      - name: Create EBS application
#        run: |
#          eb init -p python-3.7 scania_truck_failures_prediction --region ap-southeast-1
#      # Deploy to (or Create) the Elastic Beanstalk environment
#      - name: Create test environment & deploy
#        run: |
#          (eb use scania-truck-env && eb status scania-truck-env && eb deploy) || eb create scania-truck-env








name: Python Application

on:
  push:
    branches:
    - dev
  pull_request:
    branches:
    - dev

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        python -m pytest -v tests/test_script.py
    - name: Deploy to Heroku
      env:
        HEROKU_API_TOKEN: ${{ secrets.HEROKU_API_TOKEN }}
        HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
      if: github.ref == 'refs/heads/main' && job.status == 'success'
      run: |
        git remote add heroku https://heroku:$HEROKU_API_TOKEN@git.heroku.com/$HEROKU_APP_NAME.git
        git push heroku HEAD:dev -f